    def _save_test_cases(self, test_cases: Dict[str, List[Dict[str, Any]]], json_output_file: str) -> None:
        """Save test cases to JSON with backup and also create a CSV version."""

        # --- 1. Save JSON (Original logic - unchanged) ---
        try:
            # Ensure output directory exists for JSON
            json_output_dir = os.path.dirname(json_output_file)
            if json_output_dir:
                os.makedirs(json_output_dir, exist_ok=True)

            # Create backup of existing JSON file if it exists
            if os.path.exists(json_output_file):
                json_backup_file = f"{json_output_file}.{datetime.now().strftime('%Y%m%d_%H%M%S')}.bak"
                try:
                    os.rename(json_output_file, json_backup_file)
                    logging.info(f"Created JSON backup: {json_backup_file}")
                except OSError as e:
                    logging.error(f"Failed to create JSON backup for {json_output_file}: {e}")
                    # Log and continue

            # Save new test cases as JSON
            with open(json_output_file, "w", encoding='utf-8') as f:
                json.dump(test_cases, f, indent=2, ensure_ascii=False)
            logging.info(f"Successfully saved test cases to JSON: {json_output_file}")

        except Exception as e:
            logging.error(f"Failed to save test cases to JSON file {json_output_file}: {str(e)}", exc_info=True)
            # If JSON saving fails, we might not want to proceed, so re-raise
            raise # Re-raise the exception to signal failure

        # --- 2. Save CSV (Added logic based on your example) ---
        if not test_cases:
            logging.warning("Test cases dictionary is empty, skipping CSV generation.")
            return # Don't try to create an empty CSV

        # Determine CSV filename from JSON filename
        csv_output_file = os.path.splitext(json_output_file)[0] + ".csv"
        logging.info(f"Attempting to save test cases to CSV: {csv_output_file}")

        try:
            # Ensure output directory exists for CSV (usually same as JSON)
            csv_output_dir = os.path.dirname(csv_output_file)
            if csv_output_dir:
                os.makedirs(csv_output_dir, exist_ok=True)

            # Create backup of existing CSV file if it exists
            if os.path.exists(csv_output_file):
                csv_backup_file = f"{csv_output_file}.{datetime.now().strftime('%Y%m%d_%H%M%S')}.bak"
                try:
                    os.rename(csv_output_file, csv_backup_file)
                    logging.info(f"Created CSV backup: {csv_backup_file}")
                except OSError as e:
                    logging.error(f"Failed to create CSV backup for {csv_output_file}: {e}")
                    # Log and continue

            # Write data to CSV using the csv module
            with open(csv_output_file, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)

                # Define and write header exactly as in your example
                headers = ['SchemaName', 'FieldName', 'Test Case', 'Description', 'Expected Result', 'Input']
                writer.writerow(headers)

                # Iterate through the dictionary (keys are full_field_name)
                for full_field_name, cases_list in test_cases.items():
                    # Split the full field name (e.g., "Schema.Field.SubField")
                    parts = full_field_name.split('.', 1) # Split only on the first dot
                    schema = parts[0] if len(parts) > 0 else full_field_name # Schema is before first dot
                    field_name = parts[1] if len(parts) > 1 else "" # Field name is everything after first dot

                    # Iterate through the list of test cases for this field
                    for case_dict in cases_list:
                        # Prepare input value for CSV (handle None, convert others to string)
                        input_val = case_dict.get('input')
                        # Represent None as "NULL" string, otherwise convert to string
                        csv_input = "NULL" if input_val is None else str(input_val)

                        # Create the row list in the correct order
                        row = [
                            schema,
                            field_name,
                            case_dict.get('test_case', ''), # Use .get for safety
                            case_dict.get('description', ''),
                            case_dict.get('expected_result', ''),
                            csv_input # Use the processed input value
                        ]
                        writer.writerow(row)

            logging.info(f"Successfully saved test cases to CSV: {csv_output_file}")

        except Exception as e:
            # Log CSV-specific errors but don't raise again if JSON succeeded
            logging.error(f"Failed to save test cases to CSV file {csv_output_file}: {str(e)}", exc_info=True)
